name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (vX.Y.Z)'
        default: null

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.15.0'

      - name: Install dependencies
        run: npm install

      # - name: Run tests
      #   run: npm run test

      - name: Build the application
        run: npm run build

      - name: Determine new version
        id: determine_version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            new_version="${{ github.event.inputs.version }}"
          else
            git fetch --tags
            latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1))
            if [ -z "$latest_tag" ]; then
              new_version="v0.0.1"
            else
              IFS='.' read -r -a parts <<< "${latest_tag/v/}"
              major=${parts[0]}
              minor=${parts[1]}
              patch=${parts[2]}
              new_version="v$major.$minor.$((patch + 1))"
            fi
          fi
          echo "::set-output name=new_version::$new_version"

      - name: Create new tag
        run: |
          new_version=${{ steps.determine_version.outputs.new_version }}
          git tag $new_version
          git push origin $new_version

      - uses: mr-smithers-excellent/docker-build-push@v6
        name: Build & push Docker image
        with:
          registry: ghcr.io
          image: drill4j-ui
          tags: ${{ steps.determine_version.outputs.new_version }}
          username: ${{ secrets.GH_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.GH_CONTAINER_REGISTRY_TOKEN }}

      - name: Archive build output
        run: |
          new_version=${{ steps.determine_version.outputs.new_version }}
          zip -r "drill4j-ui-build-$new_version.zip" build
          echo "New version: $new_version"
          ls -l

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.determine_version.outputs.new_version }}
          release_name: Release ${{ steps.determine_version.outputs.new_version }}
          draft: false
          prerelease: false

      - name: Upload build to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./drill4j-ui-build-${{ steps.determine_version.outputs.new_version }}.zip
          asset_name: drill4j-ui-build-${{ steps.determine_version.outputs.new_version }}.zip
          asset_content_type: application/zip
